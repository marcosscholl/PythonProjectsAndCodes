<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.0//EN">
<!-- saved from url=(0057)http://gerard.vermeulen.free.fr/examples/DialDemo.py.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-2">
<title>DialDemo.py</title>
<style type="text/css">.adlesse-hidden{display:none!important;}				.adlesse-invisible{visibility:hidden!important;}								#adlesse_configPopup{position:fixed; background-color:#FFFFFF!important; z-index:5000!important; width:1px; height:1px;}				#adlesse_configPopup_overlay{z-index:4999!important; position:fixed; left:0; top:0; width:0; height:0; background:Black!important;}				#adlesse_configPopup_iframe{width:100%; height:100%; border:0; margin:0; padding:0;}								</style><style type="text/css">.adlesse-hidden{display:none!important;}				.adlesse-invisible{visibility:hidden!important;}				.adlesse-actionpanel{padding:0!important; margin:0!important; position:absolute!important; z-index:9999!important; border:solid #000000 1px!important; background:#ffffff!important; font-family:sans-serif!important; font-weight:normal!important; font-size:10px!important; text-decoration:none!important; color:#000000!important;}				.adlesse-actionpanel a{padding:0!important; margin:0!important; background:none repeat scroll 0 0 transparent!important; font-family:sans-serif!important; font-weight:normal!important; font-size:10px!important; text-decoration:none!important; color: #000000!important; display: inline-block !important }				.adlesse-actionpanel a:hover{text-decoration:underline!important; }				.adlesse-trans-65{opacity:0.65; filter:alpha(opacity=65); -moz-opacity:0.65; filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=65); -khtml-opacity: 0.65; -ms-filter: 'progid:DXImageTransform.Microsoft.Alpha(Opacity=65)';}				.adlesse-rounded-corner{-moz-border-radius:3px; -webkit-border-radius:3px; -khtml-border-radius:3px; border-radius:3px;}								.adlesse-actionpanel-menu{position:absolute!important; z-index:9999!important;background:#ffffff!important; font-family:sans-serif!important; font-weight:normal!important; font-size:10px!important; text-decoration:none!important; color: #000000!important; border:1px solid #000000;text-align:center!important;padding:0!important; margin:5px!important; margin-top:1px!important;min-width:55px;}				.adlesse-actionpanel-menu-h {margin: 5px;list-style-type: none;}				.adlesse-actionpanel-menu-v {list-style-type: none;} 				.adlesse-actionpanel-menu-h li{background:#ffffff; cursor:pointer; display: inline-block; padding: 5px; zoom: 1;*display: inline;border-right:1px solid #cccccc}				.adlesse-actionpanel-menu-v li{background:#ffffff;cursor:pointer;padding:3px; border-bottom: 1px solid #000000;}								.adlesse-widget-div{}				.adlesse-widget-iframe{border:0px;}								</style></head>
<body bgcolor="white" promptdialogcheckdone="1">
<pre><font color="blue">#!/usr/bin/env python</font>

<b>import</b> math
<b>import</b> random
<b>import</b> sys
<b>from</b> qt <b>import</b> *
<b>from</b> qwt <b>import</b> *

<b>class</b><font color="red"> CompassGrid</font>(QGrid):

    <b>def</b><font color="red"> __init__</font>(self, *args):
        QGrid.__init__(self, 3, *args)
        <b>if</b> qVersion() &lt; <font color="green">'3.0.0'</font>:
            self.setPaletteBackgroundColor = self.setBackgroundColor
            self.paletteBackgroundColor = self.backgroundColor
        self.setPaletteBackgroundColor(Qt.gray)
        <b>for</b> pos <b>in</b> range(6):
            self.__createCompass(pos)
        layout = self.layout()
        <b>for</b> col <b>in</b> range(layout.numCols()):
            layout.setColStretch(col, 1)

    <font color="blue"># __init__()</font>
    
    <b>def</b><font color="red"> __createCompass</font>(self, pos):
        colorGroup = QColorGroup()
        <b>for</b> c <b>in</b> range(QColorGroup.NColorRoles):
            colorGroup.setColor(c, QColor())

        colorGroup.setColor(
            QColorGroup.Base, self.paletteBackgroundColor().light(120))
        colorGroup.setColor(
            QColorGroup.Foreground, colorGroup.color(QColorGroup.Base))

        compass = QwtCompass(self)
        compass.setLineWidth(4)
        <b>if</b> pos &lt; 3:
            compass.setFrameShadow(QwtCompass.Sunken)
        <b>else</b>:
            compass.setFrameShadow(QwtCompass.Raised)

        <b>if</b> pos == 0:
            compass.setMode(QwtCompass.RotateScale)
            rose = QwtSimpleCompassRose(16, 2)
            rose.setWidth(0.15)
            compass.setRose(rose)
        <b>elif</b> pos == 1:
            compass.setLabelMap({0.0: <font color="green">"N"</font>,
                                 90.0: <font color="green">"E"</font>,
                                 180.0: <font color="green">"S"</font>,
                                 270.0: <font color="green">"W"</font>})
            rose = QwtSimpleCompassRose(4, 1)
            compass.setRose(rose)
            compass.setNeedle(QwtCompassWindArrow(QwtCompassWindArrow.Style2))
            compass.setValue(60.0)
        <b>elif</b> pos == 2:
            colorGroup.setColor(QColorGroup.Base, Qt.darkBlue)
            colorGroup.setColor(QColorGroup.Foreground,
                                QColor(Qt.darkBlue).dark(120))
            colorGroup.setColor(QColorGroup.Text, Qt.white)
            compass.setScaleTicks(1, 1, 3)
            compass.setScale(36, 5, 0)
            compass.setNeedle(
                QwtCompassMagnetNeedle(QwtCompassMagnetNeedle.ThinStyle))
            compass.setValue(220.0)
        <b>elif</b> pos == 3:
            colorGroup.setColor(QColorGroup.Base,
                                self.paletteBackgroundColor())
            colorGroup.setColor(QColorGroup.Foreground, Qt.blue)
            compass.setLineWidth(0)
            compass.scaleDraw().setOptions(compass.scaleDraw().options()
                                           | QwtScaleDraw.Backbone)
            compass.setScaleOptions(QwtDial.ScaleBackbone
                                    | QwtDial.ScaleTicks
                                    | QwtDial.ScaleLabel)
            compass.setScaleTicks(0, 0, 3)
            compass.setLabelMap({  0.0:   <font color="green">'0'</font>,
                                  60.0:  <font color="green">'60'</font>,
                                 120.0: <font color="green">'120'</font>,
                                 180.0: <font color="green">'180'</font>,
                                 240.0: <font color="green">'240'</font>,
                                 320.0: <font color="green">'320'</font>})
            compass.setScale(36, 5, 0)
            compass.setNeedle(
                QwtDialSimpleNeedle(QwtDialSimpleNeedle.Ray, False, Qt.white))
            compass.setOrigin(220.0)
            compass.setValue(20.0)
        <b>elif</b> pos == 4:
            compass.setScaleTicks(0, 0, 3)
            compass.setNeedle(QwtCompassMagnetNeedle(
                QwtCompassMagnetNeedle.TriangleStyle, Qt.white, Qt.red))
            compass.setValue(220.0)
        <b>elif</b> pos == 5:
            colorGroup.setColor(QColorGroup.Foreground, Qt.black)
            compass.setNeedle(
                QwtDialSimpleNeedle(QwtDialSimpleNeedle.Ray, False, Qt.yellow))
            compass.setValue(315.0)

        palette = compass.palette()
        <b>for</b> c <b>in</b> range(QColorGroup.NColorRoles):
            <b>if</b> colorGroup.color(c).isValid():
                <b>for</b> cg <b>in</b> range(QPalette.NColorGroups):
                    palette.setColor(cg, c, colorGroup.color(c))

        <b>for</b> cg <b>in</b> range(QPalette.NColorGroups):
            light = palette.color(cg, QColorGroup.Base).light(170)
            dark = palette.color(cg, QColorGroup.Base).dark(170)
            <b>if</b> compass.frameShadow() == QwtDial.Raised:
                mid = palette.color(cg, QColorGroup.Base).dark(110)
            <b>else</b>:
                mid = palette.color(cg, QColorGroup.Base).light(110)

            palette.setColor(cg, QColorGroup.Dark, dark)
            palette.setColor(cg, QColorGroup.Mid, mid)
            palette.setColor(cg, QColorGroup.Light, light)

        compass.setPalette(palette)

    <font color="blue"># __createCompass()</font>

<font color="blue"># class CompassGrid</font>


<b>class</b><font color="red"> SpeedoMeter</font>(QwtDial):

    <b>def</b><font color="red"> __init__</font>(self, *args):
        QwtDial.__init__(self, *args)
        self.__label = <font color="green">'km/h'</font>
        self.setWrapping(False)
        self.setReadOnly(True)

        self.setOrigin(135.0)
        self.setScaleArc(0.0, 270.0)

        self.setNeedle(QwtDialSimpleNeedle(
            QwtDialSimpleNeedle.Arrow, True, Qt.red, Qt.gray.light(130)))

        self.setScaleOptions(QwtDial.ScaleTicks | QwtDial.ScaleLabel)
        self.setScaleTicks(0, 4, 8)

    <font color="blue"># __init__()</font>
    
    <b>def</b><font color="red"> setLabel</font>(self, text):
        self.__label = text

    <font color="blue"># setLabel()</font>
    
    <b>def</b><font color="red"> label</font>(self):
        <b>return</b> self.__label

    <font color="blue"># label()</font>
    
    <b>def</b><font color="red"> drawScaleContents</font>(self, painter, center, radius):
        rect = QRect(0, 0, 2 * radius, 2 * radius - 10)
        rect.moveCenter(center)
        painter.setPen(self.colorGroup().text())
        painter.drawText(rect, Qt.AlignBottom | Qt.AlignHCenter, self.__label)

    <font color="blue"># drawScaleContents</font>

<font color="blue"># class SpeedoMeter</font>


<b>class</b><font color="red"> AttitudeIndicatorNeedle</font>(QwtDialNeedle):

    <b>def</b><font color="red"> __init__</font>(self, color):
        QwtDialNeedle.__init__(self)
        palette = QPalette()
        <b>for</b> cg <b>in</b> range(QPalette.NColorGroups):
            palette.setColor(cg, QColorGroup.Text, color)
        self.setPalette(palette)

    <font color="blue"># __init__()</font>
    
    <b>def</b><font color="red"> draw</font>(self, painter, center, length, direction, cg):
        direction *= math.pi / 180.0
        triangleSize = int(round(length * 0.1))

        painter.save()

        p0 = QPoint(center.x() + 1, center.y() + 1)
        p1 = qwtPolar2Pos(p0, length - 2 * triangleSize - 2, direction)

        pa = QPointArray(3)
        pa.setPoint(0, qwtPolar2Pos(p1, 2 * triangleSize, direction))
        pa.setPoint(1, qwtPolar2Pos(p1, triangleSize, direction + math.pi/2))
        pa.setPoint(2, qwtPolar2Pos(p1, triangleSize, direction - math.pi/2))

        painter.setBrush(self.colorGroup(cg).text())
        painter.drawPolygon(pa)

        painter.setPen(QPen(self.colorGroup(cg).text(), 3))
        painter.drawLine(qwtPolar2Pos(p0, length - 2, direction + math.pi/2),
                         qwtPolar2Pos(p0, length - 2, direction - math.pi/2))

        painter.restore()

    <font color="blue"># draw()</font>

<font color="blue"># class AttitudeIndicatorNeedle</font>


<b>class</b><font color="red"> AttitudeIndicator</font>(QwtDial):

    <b>def</b><font color="red"> __init__</font>(self, *args):
        QwtDial.__init__(self, *args)
        self.__gradient = 0.0
        self.setMode(QwtDial.RotateScale)
        self.setWrapping(True)
        self.setOrigin(270.0)
        self.setScaleOptions(QwtDial.ScaleTicks)
        self.setScale(0, 0, 30.0)
        self.setNeedle(AttitudeIndicatorNeedle(self.colorGroup().text()))

    <font color="blue"># __init__()</font>

    <b>def</b><font color="red"> angle</font>(self):
        <b>return</b> self.value()

    <font color="blue"># angle()</font>
    
    <b>def</b><font color="red"> setAngle</font>(self, angle):
        self.setValue(angle)

    <font color="blue"># setAngle()</font>

    <b>def</b><font color="red"> gradient</font>(self):
        <b>return</b> self.__gradient

    <font color="blue"># gradient()</font>

    <b>def</b><font color="red"> setGradient</font>(self, gradient):
        self.__gradient = gradient

    <font color="blue"># setGradient()</font>
    
    <b>def</b><font color="red"> keyPressEvent</font>(self, event):
        <b>if</b> event.key() == Qt.Key_Plus:
            self.setGradient(self.gradient() + 0.05)
        <b>elif</b> event.key() == Qt.Key_Minus:
            self.setGradient(self.gradient() - 0.05)
        <b>else</b>:
            QwtDial.keyPressEvent(self, event)

    <font color="blue"># keyPressEvent()</font>

    <b>def</b><font color="red"> drawScale</font>(self, painter, center, radius, origin, minArc, maxArc):
        dir = (360.0 - origin) * math.pi / 180.0
        offset = 4
        p0 = qwtPolar2Pos(center, offset, dir + math.pi)

        w = self.contentsRect().width()

        <font color="blue"># clip region to swallow 180 - 360 degrees</font>
        pa = QPointArray(4)
        pa.setPoint(0, qwtPolar2Pos(p0, w, dir - math.pi/2))
        pa.setPoint(1, qwtPolar2Pos(
            QPoint(*pa.point(0)), 2 * w, dir + math.pi/2))
        pa.setPoint(2, qwtPolar2Pos(
            QPoint(*pa.point(1)), w, dir))
        pa.setPoint(3, qwtPolar2Pos(
            QPoint(*pa.point(2)), 2 * w, dir - math.pi/2))

        painter.save()
        painter.setClipRegion(QRegion(pa))
        QwtDial.drawScale(
            self, painter, center, radius, origin, minArc, maxArc)
        painter.restore()

    <font color="blue"># drawScale()</font>
    
    <b>def</b><font color="red"> drawScaleContents</font>(self, painter, center, radius):
        dir = 360 - int(round(self.origin() - self.value()))
        arc = 90 + int(round(self.gradient() * 90))
        skyColor = QColor(38, 151, 221)
        painter.save()
        painter.setBrush(skyColor)
        painter.drawChord(
            self.scaleContentsRect(), (dir - arc)*16, 2*arc*16)
        painter.restore()

    <font color="blue"># drawScaleContents()</font>

<font color="blue"># class AttitudeIndicator</font>


<b>class</b><font color="red"> CockpitGrid</font>(QGrid):
    
    <b>def</b><font color="red"> __init__</font>(self, *args):
        QGrid.__init__(self, 3, *args)
        self.setPalette(self.__colorTheme(Qt.darkGray.dark(150)))
        <b>for</b> pos <b>in</b> range(3):
            self.__createDial(pos)
        layout = self.layout()
        <b>for</b> col <b>in</b> range(layout.numCols()):
            layout.setColStretch(col, 1)
        self.__speed_offset = 0.8
        self.__angle_offset = 0.05
        self.__gradient_offset = 0.005
            
    <font color="blue"># __init__()</font>
    
    <b>def</b><font color="red"> __colorTheme</font>(self, base):
        background = base.dark(150)
        foreground = base.dark(200)
        
        mid = base.dark(110)
        dark = base.dark(170)
        light = base.light(170)
        text = foreground.light(800)

        cg = QColorGroup()
        cg.setColor(QColorGroup.Base, base)
        cg.setColor(QColorGroup.Background, background)
        cg.setColor(QColorGroup.Mid, mid)
        cg.setColor(QColorGroup.Light, light)
        cg.setColor(QColorGroup.Dark, dark)
        cg.setColor(QColorGroup.Text, text)
        cg.setColor(QColorGroup.Foreground, foreground)
        
        palette = QPalette()
        palette.setActive(cg)
        palette.setDisabled(cg)
        palette.setInactive(cg)

        <b>return</b> palette

    <font color="blue"># __colorTheme()</font>

    <b>def</b><font color="red"> __createDial</font>(self, pos):
        dial = None
        <b>if</b> pos == 0:
            self.__clock = QwtAnalogClock(self)
            knobColor = Qt.gray.light(130)
            <b>for</b> i <b>in</b> range(QwtAnalogClock.NHands):
                handColor = Qt.gray.light(150)
                width = 8
                <b>if</b> i == QwtAnalogClock.SecondHand:
                    handColor = Qt.gray
                    width = 5

                hand = QwtDialSimpleNeedle(
                    QwtDialSimpleNeedle.Arrow, True, handColor, knobColor)
                hand.setWidth(width)
                self.__clock.setHand(i, hand)
            timer = QTimer(self.__clock)
            timer.connect(timer, SIGNAL(<font color="green">'timeout()'</font>),
                          self.__clock, SLOT(<font color="green">'setCurrentTime()'</font>))
            timer.start(1000)
            dial = self.__clock
        <b>elif</b> pos == 1:
            self.__speedo = SpeedoMeter(self)
            self.__speedo.setRange(0.0, 240.0)
            self.__speedo.setScale(-1, 2, 20)
            timer = QTimer(self.__speedo)
            timer.connect(timer, SIGNAL(<font color="green">'timeout()'</font>), self.changeSpeed)
            timer.start(50)
            dial = self.__speedo
        <b>elif</b> pos == 2:
            self.__ai = AttitudeIndicator(self)
            gradientTimer = QTimer(self.__ai)
            gradientTimer.connect(
                gradientTimer, SIGNAL(<font color="green">'timeout()'</font>), self.changeGradient)
            gradientTimer.start(100)
            angleTimer = QTimer(self.__ai)
            angleTimer.connect(
                angleTimer, SIGNAL(<font color="green">'timeout()'</font>), self.changeAngle)
            angleTimer.start(100)
            dial = self.__ai

        <b>if</b> dial:
            dial.setReadOnly(True)
            dial.scaleDraw().setPenWidth(3)
            dial.setLineWidth(4)
            dial.setFrameShadow(QwtDial.Sunken)

    <font color="blue"># __createDial()</font>

    <b>def</b><font color="red"> changeSpeed</font>(self):
        speed = self.__speedo.value()
        <b>if</b> ((speed &lt; 40.0 <b>and</b> self.__speed_offset &lt; 0.0)
            <b>or</b> (speed &gt; 200.0 <b>and</b> self.__speed_offset &gt; 0.0)):
            self.__speed_offset = -self.__speed_offset
        r = random.randrange(12)
        <b>if</b> r &lt; 6:
            self.__speedo.setValue(speed + r*self.__speed_offset)

    <font color="blue"># changeSpeed()</font>

    <b>def</b><font color="red"> changeAngle</font>(self):
        angle = self.__ai.angle()
        <b>if</b> angle &gt; 180.0:
            angle -= 360.0

        <b>if</b> ((angle &lt; -7.0 <b>and</b> self.__angle_offset &lt; 0.0 )
            <b>or</b> (angle &gt; 7.0 <b>and</b> self.__angle_offset &gt; 0.0)):
            self.__angle_offset = -self.__angle_offset
            
        self.__ai.setAngle(angle + self.__angle_offset)

    <font color="blue"># changeAngle()</font>

    <b>def</b><font color="red"> changeGradient</font>(self):
        gradient = self.__ai.gradient()

        <b>if</b> ((gradient &lt; -0.05 <b>and</b> self.__gradient_offset &lt; 0.0 )
            <b>or</b> (gradient &gt; 0.05 <b>and</b> self.__gradient_offset &gt; 0.0)):
            self.__gradient_offset = -self.__gradient_offset

        self.__ai.setGradient(gradient + self.__gradient_offset)

    <font color="blue"># changeGradient()</font>

<font color="blue"># class CockpitGrid</font>


<b>def</b><font color="red"> main</font>(args):
    app = QApplication(args)
    demo = make()
    app.setMainWidget(demo)
    app.exec_loop()

<font color="blue"># main()</font>

<b>def</b><font color="red"> make</font>():
    demo = QTabWidget()
    demo.addTab(CompassGrid(demo), <font color="green">"Compass"</font>)
    demo.addTab(CockpitGrid(demo), <font color="green">"Cockpit"</font>)
    demo.show()
    <b>return</b> demo

<font color="blue"># make()</font>

<font color="blue"># Admire!</font>
<b>if</b> __name__ == <font color="green">'__main__'</font>:
    main(sys.argv)
    



</pre>


<textarea id="adlesse_unifier_magic_element_id" style="display: none;"></textarea></body></html>